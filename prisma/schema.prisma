// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String?
  googleId     String?   @unique
  name         String?
  avatar       String?
  role         UserRole  @default(EDITOR)
  status       UserStatus @default(ACTIVE)
  lastLoginAt  DateTime?
  invitedBy    String?
  invitedAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  inviter      User?     @relation("UserInvitations", fields: [invitedBy], references: [id])
  invitees     User[]    @relation("UserInvitations")
  sentInvitations UserInvitation[]
  Media        Media[]
  blogPosts    BlogPost[]
  blogComments BlogComment[]

  @@map("users")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

model UserInvitation {
  id          String            @id @default(uuid())
  email       String
  role        UserRole          @default(EDITOR)
  token       String            @unique
  invitedBy   String
  status      InvitationStatus  @default(PENDING)
  expiresAt   DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  inviter     User              @relation(fields: [invitedBy], references: [id])

  @@map("user_invitations")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model Page {
  id             String        @id @default(uuid())
  title          String
  slug           String        @unique
  status         PageStatus    @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  publishedAt    DateTime?
  sections       PageSection[]
  navigationItems NavigationItem[]

  @@map("pages")
}

enum PageStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

model SectionTemplate {
  id            String        @id @unique
  name          String        @unique
  componentName String        @unique
  defaultProps  Json
  description   String?
  PageSection   PageSection[]

  @@map("section_templates")
}

model PageSection {
  id                String          @id @default(uuid())
  pageId            String
  sectionTemplateId String
  order             Int
  props             Json
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  page            Page            @relation(fields: [pageId], references: [id], onDelete: Cascade)
  sectionTemplate SectionTemplate @relation(fields: [sectionTemplateId], references: [id])

  @@unique([pageId, order])
  @@map("page_sections")
}

model Media {
  id         String    @id @default(uuid())
  url        String    @unique
  altText    String?
  type       MediaType
  uploadedBy String
  uploader   User      @relation(fields: [uploadedBy], references: [id])
  fileName   String
  fileSize   Int
  mimeType   String
  category   String    @default("general")
  createdAt  DateTime  @default(now())

  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

model Setting {
  id    String @id @default(uuid())
  key   String @unique
  value String

  @@map("settings")
}

model SiteConfig {
  id                String   @id @default(uuid())
  siteName          String   @default("My Website")
  siteDescription   String?
  logoUrl           String?
  faviconUrl        String?
  primaryColor      String   @default("#3b82f6")
  secondaryColor    String   @default("#64748b")
  accentColor       String   @default("#10b981")
  backgroundColor   String   @default("#ffffff")
  textColor         String   @default("#1f2937")
  borderColor       String   @default("#e5e7eb")
  theme             Theme    @default(LIGHT)
  language          String   @default("en")
  direction         Direction @default(LTR)
  headerTemplateId  String?
  footerTemplateId  String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  headerTemplate HeaderTemplate? @relation("SiteConfigHeader", fields: [headerTemplateId], references: [id])
  footerTemplate FooterTemplate? @relation("SiteConfigFooter", fields: [footerTemplateId], references: [id])

  @@map("site_config")
}

enum Theme {
  LIGHT
  DARK
  AUTO
}

enum Direction {
  LTR
  RTL
}

model HeaderTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  template    String   // Template identifier (e.g., "modern", "classic", "minimal")
  config      Json     // Template-specific configuration
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  siteConfigs SiteConfig[] @relation("SiteConfigHeader")

  @@map("header_templates")
}

model FooterTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  template    String   // Template identifier (e.g., "modern", "classic", "minimal")
  config      Json     // Template-specific configuration
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  siteConfigs SiteConfig[] @relation("SiteConfigFooter")

  @@map("footer_templates")
}

model NavigationMenu {
  id          String           @id @default(uuid())
  name        String
  location    MenuLocation
  items       NavigationItem[]
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("navigation_menus")
}

enum MenuLocation {
  HEADER_PRIMARY
  HEADER_SECONDARY
  FOOTER_PRIMARY
  FOOTER_SECONDARY
  SIDEBAR
}

model NavigationItem {
  id           String           @id @default(uuid())
  menuId       String
  parentId     String?
  title        String
  url          String?
  pageId       String?
  target       LinkTarget       @default(SELF)
  order        Int
  isVisible    Boolean          @default(true)
  cssClass     String?
  icon         String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  menu     NavigationMenu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent   NavigationItem?   @relation("NavigationItemChildren", fields: [parentId], references: [id])
  children NavigationItem[]  @relation("NavigationItemChildren")
  page     Page?             @relation(fields: [pageId], references: [id])

  @@unique([menuId, order])
  @@map("navigation_items")
}

enum LinkTarget {
  SELF
  BLANK
}

model Translation {
  id       String @id @default(uuid())
  language String
  key      String
  value    String
  context  String?

  @@unique([language, key])
  @@map("translations")
}
// Blog System Models
model BlogCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  slug        String     @unique
  description String?
  color       String?    @default("#3b82f6")
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  posts       BlogPost[]

  @@map("blog_categories")
}

model BlogTag {
  id        String     @id @default(uuid())
  name      String     @unique
  slug      String     @unique
  color     String?    @default("#64748b")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  posts     BlogPostTag[]

  @@map("blog_tags")
}

model BlogPost {
  id             String        @id @default(uuid())
  title          String
  slug           String        @unique
  excerpt        String?
  content        String
  featuredImage  String?
  status         BlogPostStatus @default(DRAFT)
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?
  readingTime    Int?          // in minutes
  viewCount      Int           @default(0)
  authorId       String
  categoryId     String?
  publishedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  author         User          @relation(fields: [authorId], references: [id])
  category       BlogCategory? @relation(fields: [categoryId], references: [id])
  tags           BlogPostTag[]
  comments       BlogComment[]

  @@index([status, publishedAt])
  @@index([categoryId])
  @@index([authorId])
  @@map("blog_posts")
}

enum BlogPostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

model BlogPostTag {
  id     String @id @default(uuid())
  postId String
  tagId  String

  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    BlogTag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("blog_post_tags")
}

model BlogComment {
  id        String            @id @default(uuid())
  content   String
  authorId  String?
  postId    String
  parentId  String?
  status    BlogCommentStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  author   User?         @relation(fields: [authorId], references: [id])
  post     BlogPost      @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent   BlogComment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  BlogComment[] @relation("CommentReplies")

  @@index([postId])
  @@index([status])
  @@map("blog_comments")
}

enum BlogCommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}